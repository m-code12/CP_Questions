Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up: The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Solution:

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double sum;
        int i=0,j=0,k=0,n1=nums1.size(),n2=nums2.size();
        int arr[n1+n2];
        
        while(i<n1 && j<n2){
            if (nums1[i]<nums2[j])
                arr[k++]=nums1[i++];
            else
                arr[k++]=nums2[j++];
        }
        
        while(i<n1){
            arr[k++]=nums1[i++];
        }
        
        while(j<n2){
            arr[k++]=nums2[j++];
        }
        
        
        if((n1+n2)% 2 == 0){
            sum = (arr[(n1+n2)/2]+arr[((n1+n2)/2)-1])/2.0;
            
        }
        else
            sum = arr[(n1+n2-1)/2];
        
        return sum;
    }
};
