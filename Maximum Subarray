Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105
 
Solution:

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max_end_here=0, max_so_far=0,c=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0)
                c++;
        }
        if(c==nums.size())
            return *max_element(nums.begin(),nums.end());
        
        for(int i=0;i<nums.size();i++){
            max_so_far+=nums[i];
            if(max_end_here<max_so_far)
                max_end_here = max_so_far;
            if(max_so_far<0)
                max_so_far=0;
        }
        return max_end_here;
    }
};
